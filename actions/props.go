package actions

import (
	"github.com/cdacontrol/cda/models"
	"github.com/gobuffalo/buffalo"
	"github.com/markbates/pop"
	"github.com/pkg/errors"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Prop)
// DB Table: Plural (props)
// Resource: Plural (Props)
// Path: Plural (/props)
// View Template Folder: Plural (/templates/props/)

// PropsResource is the resource for the Prop model
type PropsResource struct {
	buffalo.Resource
}

// List gets all Props. This function is mapped to the path
// GET /props
func (v PropsResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	props := &models.Props{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Props from the DB
	if err := q.All(props); err != nil {
		return errors.WithStack(err)
	}

	// Make Props available inside the html template
	c.Set("props", props)

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	return c.Render(200, r.HTML("props/index.html"))
}

// Show gets the data for one Prop. This function is mapped to
// the path GET /props/{prop_id}
func (v PropsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Allocate an empty Prop
	prop := &models.Prop{}

	// To find the Prop the parameter prop_id is used.
	if err := tx.Find(prop, c.Param("prop_id")); err != nil {
		return c.Error(404, err)
	}

	// Make prop available inside the html template
	c.Set("prop", prop)

	return c.Render(200, r.HTML("props/show.html"))
}

// New renders the form for creating a new Prop.
// This function is mapped to the path GET /props/new
func (v PropsResource) New(c buffalo.Context) error {
	// Make prop available inside the html template
	c.Set("prop", &models.Prop{})

	return c.Render(200, r.HTML("props/new.html"))
}

// Create adds a Prop to the DB. This function is mapped to the
// path POST /props
func (v PropsResource) Create(c buffalo.Context) error {
	// Allocate an empty Prop
	prop := &models.Prop{}

	// Bind prop to the html form elements
	if err := c.Bind(prop); err != nil {
		return errors.WithStack(err)
	}

	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(prop)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make prop available inside the html template
		c.Set("prop", prop)

		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("props/new.html"))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Prop was created successfully")

	// and redirect to the props index page
	return c.Redirect(302, "/props/%s", prop.ID)
}

// Edit renders a edit form for a Prop. This function is
// mapped to the path GET /props/{prop_id}/edit
func (v PropsResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Allocate an empty Prop
	prop := &models.Prop{}

	if err := tx.Find(prop, c.Param("prop_id")); err != nil {
		return c.Error(404, err)
	}

	// Make prop available inside the html template
	c.Set("prop", prop)
	return c.Render(200, r.HTML("props/edit.html"))
}

// Update changes a Prop in the DB. This function is mapped to
// the path PUT /props/{prop_id}
func (v PropsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Allocate an empty Prop
	prop := &models.Prop{}

	if err := tx.Find(prop, c.Param("prop_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind Prop to the html form elements
	if err := c.Bind(prop); err != nil {
		return errors.WithStack(err)
	}

	verrs, err := tx.ValidateAndUpdate(prop)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make prop available inside the html template
		c.Set("prop", prop)

		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("props/edit.html"))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Prop was updated successfully")

	// and redirect to the props index page
	return c.Redirect(302, "/props/%s", prop.ID)
}

// Destroy deletes a Prop from the DB. This function is mapped
// to the path DELETE /props/{prop_id}
func (v PropsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Allocate an empty Prop
	prop := &models.Prop{}

	// To find the Prop the parameter prop_id is used.
	if err := tx.Find(prop, c.Param("prop_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(prop); err != nil {
		return errors.WithStack(err)
	}

	// If there are no errors set a flash message
	c.Flash().Add("success", "Prop was destroyed successfully")

	// Redirect to the props index page
	return c.Redirect(302, "/props")
}
