package actions

import (
	"github.com/cdacontrol/cda/models"
	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop"
	"github.com/pkg/errors"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Scene)
// DB Table: Plural (scenes)
// Resource: Plural (Scenes)
// Path: Plural (/scenes)
// View Template Folder: Plural (/templates/scenes/)

// ScenesResource is the resource for the Scene model
type ScenesResource struct {
	buffalo.Resource
}

// List gets all Scenes. This function is mapped to the path
// GET /scenes
func (v ScenesResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	scenes := &models.Scenes{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Scenes from the DB
	if err := q.All(scenes); err != nil {
		return errors.WithStack(err)
	}

	// Make Scenes available inside the html template
	c.Set("scenes", scenes)

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	return c.Render(200, r.HTML("scenes/index.html"))
}

// Show gets the data for one Scene. This function is mapped to
// the path GET /scenes/{scene_id}
func (v ScenesResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Allocate an empty Scene
	scene := &models.Scene{}

	// To find the Scene the parameter scene_id is used.
	if err := tx.Find(scene, c.Param("scene_id")); err != nil {
		return c.Error(404, err)
	}

	// Make scene available inside the html template
	c.Set("scene", scene)

	return c.Render(200, r.HTML("scenes/show.html"))
}

// New renders the form for creating a new Scene.
// This function is mapped to the path GET /scenes/new
func (v ScenesResource) New(c buffalo.Context) error {
	// Make scene available inside the html template
	c.Set("scene", &models.Scene{})

	return c.Render(200, r.HTML("scenes/new.html"))
}

// Create adds a Scene to the DB. This function is mapped to the
// path POST /scenes
func (v ScenesResource) Create(c buffalo.Context) error {
	// Allocate an empty Scene
	scene := &models.Scene{}

	// Bind scene to the html form elements
	if err := c.Bind(scene); err != nil {
		return errors.WithStack(err)
	}

	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(scene)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make scene available inside the html template
		c.Set("scene", scene)

		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("scenes/new.html"))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Scene was created successfully")

	// and redirect to the scenes index page
	return c.Redirect(302, "/scenes/%s", scene.ID)
}

// Edit renders a edit form for a Scene. This function is
// mapped to the path GET /scenes/{scene_id}/edit
func (v ScenesResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Allocate an empty Scene
	scene := &models.Scene{}

	if err := tx.Find(scene, c.Param("scene_id")); err != nil {
		return c.Error(404, err)
	}

	// Make scene available inside the html template
	c.Set("scene", scene)
	return c.Render(200, r.HTML("scenes/edit.html"))
}

// Update changes a Scene in the DB. This function is mapped to
// the path PUT /scenes/{scene_id}
func (v ScenesResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Allocate an empty Scene
	scene := &models.Scene{}

	if err := tx.Find(scene, c.Param("scene_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind Scene to the html form elements
	if err := c.Bind(scene); err != nil {
		return errors.WithStack(err)
	}

	verrs, err := tx.ValidateAndUpdate(scene)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make scene available inside the html template
		c.Set("scene", scene)

		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("scenes/edit.html"))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Scene was updated successfully")

	// and redirect to the scenes index page
	return c.Redirect(302, "/scenes/%s", scene.ID)
}

// Destroy deletes a Scene from the DB. This function is mapped
// to the path DELETE /scenes/{scene_id}
func (v ScenesResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Allocate an empty Scene
	scene := &models.Scene{}

	// To find the Scene the parameter scene_id is used.
	if err := tx.Find(scene, c.Param("scene_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(scene); err != nil {
		return errors.WithStack(err)
	}

	// If there are no errors set a flash message
	c.Flash().Add("success", "Scene was destroyed successfully")

	// Redirect to the scenes index page
	return c.Redirect(302, "/scenes")
}
