package actions

import (
	"github.com/cdacontrol/cda/models"
	"github.com/gobuffalo/buffalo"
	"github.com/markbates/pop"
	"github.com/pkg/errors"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (System)
// DB Table: Plural (systems)
// Resource: Plural (Systems)
// Path: Plural (/systems)
// View Template Folder: Plural (/templates/systems/)

// SystemsResource is the resource for the System model
type SystemsResource struct {
	buffalo.Resource
}

// List gets all Systems. This function is mapped to the path
// GET /systems
func (v SystemsResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	systems := &models.Systems{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Systems from the DB
	if err := q.All(systems); err != nil {
		return errors.WithStack(err)
	}

	// Make Systems available inside the html template
	c.Set("systems", systems)

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	return c.Render(200, r.HTML("systems/index.html"))
}

// Show gets the data for one System. This function is mapped to
// the path GET /systems/{system_id}
func (v SystemsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Allocate an empty System
	system := &models.System{}

	// To find the System the parameter system_id is used.
	if err := tx.Find(system, c.Param("system_id")); err != nil {
		return c.Error(404, err)
	}

	// Make system available inside the html template
	c.Set("system", system)

	return c.Render(200, r.HTML("systems/show.html"))
}

// New renders the form for creating a new System.
// This function is mapped to the path GET /systems/new
func (v SystemsResource) New(c buffalo.Context) error {
	// Make system available inside the html template
	c.Set("system", &models.System{})

	return c.Render(200, r.HTML("systems/new.html"))
}

// Create adds a System to the DB. This function is mapped to the
// path POST /systems
func (v SystemsResource) Create(c buffalo.Context) error {
	// Allocate an empty System
	system := &models.System{}

	// Bind system to the html form elements
	if err := c.Bind(system); err != nil {
		return errors.WithStack(err)
	}

	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(system)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make system available inside the html template
		c.Set("system", system)

		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("systems/new.html"))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "System was created successfully")

	// and redirect to the systems index page
	return c.Redirect(302, "/systems/%s", system.ID)
}

// Edit renders a edit form for a System. This function is
// mapped to the path GET /systems/{system_id}/edit
func (v SystemsResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Allocate an empty System
	system := &models.System{}

	if err := tx.Find(system, c.Param("system_id")); err != nil {
		return c.Error(404, err)
	}

	// Make system available inside the html template
	c.Set("system", system)
	return c.Render(200, r.HTML("systems/edit.html"))
}

// Update changes a System in the DB. This function is mapped to
// the path PUT /systems/{system_id}
func (v SystemsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Allocate an empty System
	system := &models.System{}

	if err := tx.Find(system, c.Param("system_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind System to the html form elements
	if err := c.Bind(system); err != nil {
		return errors.WithStack(err)
	}

	verrs, err := tx.ValidateAndUpdate(system)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make system available inside the html template
		c.Set("system", system)

		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("systems/edit.html"))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "System was updated successfully")

	// and redirect to the systems index page
	return c.Redirect(302, "/systems/%s", system.ID)
}

// Destroy deletes a System from the DB. This function is mapped
// to the path DELETE /systems/{system_id}
func (v SystemsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Allocate an empty System
	system := &models.System{}

	// To find the System the parameter system_id is used.
	if err := tx.Find(system, c.Param("system_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(system); err != nil {
		return errors.WithStack(err)
	}

	// If there are no errors set a flash message
	c.Flash().Add("success", "System was destroyed successfully")

	// Redirect to the systems index page
	return c.Redirect(302, "/systems")
}
