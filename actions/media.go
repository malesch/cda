package actions

import (
	"io"
	"net/http"
	"os"
	"path/filepath"

	"github.com/cdacontrol/cda/models"
	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop"
	"github.com/gobuffalo/pop/nulls"
	"github.com/gobuffalo/uuid"
	"github.com/pkg/errors"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Medium)
// DB Table: Plural (media)
// Resource: Plural (Media)
// Path: Plural (/media)
// View Template Folder: Plural (/templates/media/)

// MediaResource is the resource for the Medium model
type MediaResource struct {
	buffalo.Resource
}

// List gets all Media. This function is mapped to the path
// GET /media
func (v MediaResource) List(c buffalo.Context) error {
	tx := c.Value("tx").(*pop.Connection)

	media := &models.Media{}

	q := tx.PaginateFromParams(c.Params())

	if err := q.All(media); err != nil {
		return errors.WithStack(err)
	}

	c.Set("media", media)
	c.Set("pagination", q.Paginator)

	return c.Render(200, r.HTML("media/index.html"))
}

// Show gets the data for one Medium. This function is mapped to
// the path GET /media/{medium_id}
func (v MediaResource) Show(c buffalo.Context) error {
	tx := c.Value("tx").(*pop.Connection)

	medium := &models.Medium{}

	if err := tx.Find(medium, c.Param("medium_id")); err != nil {
		return c.Error(404, err)
	}

	c.Set("medium", medium)

	return c.Render(200, r.HTML("media/show.html"))
}

// New renders the form for creating a new Medium.
// This function is mapped to the path GET /media/new
func (v MediaResource) New(c buffalo.Context) error {
	c.Set("medium", &models.Medium{})

	return c.Render(200, r.HTML("media/new.html"))
}

// Create adds a Medium to the DB. This function is mapped to the
// path POST /media
func (v MediaResource) Create(c buffalo.Context) error {
	medium := &models.Medium{}

	if err := c.Bind(medium); err != nil {
		return errors.WithStack(err)
	}

	tx := c.Value("tx").(*pop.Connection)

	tmpdir := filepath.Join(os.TempDir(), "_cda")
	mediaInfo, err := getMediumInfo(filepath.Join(tmpdir, medium.FileID))
	if err != nil {
		return errors.WithStack(err)
	}
	if medium.Name.String == "" {
		medium.Name = nulls.NewString(medium.FileName)
	}
	medium.Size = int(mediaInfo.FileInfo.Size())
	medium.Type = mediaInfo.MimeType

	verrs, err := tx.ValidateAndCreate(medium)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		c.Set("medium", medium)
		c.Set("errors", verrs)

		return c.Render(422, r.HTML("media/new.html"))
	}

	c.Flash().Add("success", "Medium was created successfully")

	return c.Redirect(302, "/media/%s", medium.ID)
}

// Edit renders a edit form for a Medium. This function is
// mapped to the path GET /media/{medium_id}/edit
func (v MediaResource) Edit(c buffalo.Context) error {
	tx := c.Value("tx").(*pop.Connection)

	medium := &models.Medium{}

	if err := tx.Find(medium, c.Param("medium_id")); err != nil {
		return c.Error(404, err)
	}

	c.Set("medium", medium)
	return c.Render(200, r.HTML("media/edit.html"))
}

// Update changes a Medium in the DB. This function is mapped to
// the path PUT /media/{medium_id}
func (v MediaResource) Update(c buffalo.Context) error {
	tx := c.Value("tx").(*pop.Connection)

	medium := &models.Medium{}

	if err := tx.Find(medium, c.Param("medium_id")); err != nil {
		return c.Error(404, err)
	}

	if err := c.Bind(medium); err != nil {
		return errors.WithStack(err)
	}

	verrs, err := tx.ValidateAndUpdate(medium)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		c.Set("medium", medium)
		c.Set("errors", verrs)

		return c.Render(422, r.HTML("media/edit.html"))
	}

	c.Flash().Add("success", "Medium was updated successfully")

	return c.Redirect(302, "/media/%s", medium.ID)
}

// Destroy deletes a Medium from the DB. This function is mapped
// to the path DELETE /media/{medium_id}
func (v MediaResource) Destroy(c buffalo.Context) error {
	tx := c.Value("tx").(*pop.Connection)

	medium := &models.Medium{}

	if err := tx.Find(medium, c.Param("medium_id")); err != nil {
		return c.Error(404, err)
	}

	mediaID := medium.ID.String()
	if err := tx.Destroy(medium); err != nil {
		return errors.WithStack(err)
	}

	// Remove media file
	mediaStorePath, err := models.MediaStorePath()
	if err != nil {
		return errors.WithStack(err)
	}

	os.Remove(filepath.Join(mediaStorePath, mediaID)) // ignore errors

	c.Flash().Add("success", "Medium was destroyed successfully")

	return c.Redirect(302, "/media")
}

// MediaUploadHandler receives an uploaded media file and stores it in a
// temporary file. On success the file name (UUID string) is returned with
// the response.
func MediaUploadHandler(c buffalo.Context) error {
	c.Request().ParseMultipartForm(0)
	Form := c.Request().MultipartForm
	filename := Form.File["file"][0].Filename
	file, _ := Form.File["file"][0].Open()

	mediaUUID := uuid.Must(uuid.NewV4()).String()
	tmpdir := filepath.Join(os.TempDir(), "_cda")
	os.MkdirAll(tmpdir, os.ModePerm)
	outfile, err := os.Create(filepath.Join(tmpdir, mediaUUID))
	defer outfile.Close()
	if err != nil {
		return c.Error(400, errors.New("Error saving file: "+err.Error()))
	}

	_, err = io.Copy(outfile, file)
	if err != nil {
		return c.Error(400, errors.New("Error saving file: "+err.Error()))
	}

	return c.Render(200, r.JSON(map[string]string{
		"fileName": filename,
		"fileID":   mediaUUID,
	}))
}

func getMimeType(fname string) (string, error) {
	file, err := os.Open(fname)
	defer file.Close()
	if err != nil {
		return "", err
	}

	buffer := make([]byte, 512)
	n, err := file.Read(buffer)
	if err != nil {
		return "", err
	}
	return http.DetectContentType(buffer[:n]), nil
}

// MediumInfo is the FileInfo struct extended by the medium MIME type
type MediumInfo struct {
	os.FileInfo
	MimeType string
}

func getMediumInfo(fname string) (*MediumInfo, error) {
	mediumInfo := MediumInfo{}
	info, err := os.Stat(fname)
	if err != nil {
		return nil, err
	}
	mediumInfo.FileInfo = info

	mimeType, err := getMimeType(fname)
	if err != nil {
		return nil, err
	}
	mediumInfo.MimeType = mimeType

	return &mediumInfo, nil
}
